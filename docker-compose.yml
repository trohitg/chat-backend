
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: chat-postgres
    environment:
      POSTGRES_DB: chatdb
      POSTGRES_USER: chatuser
      POSTGRES_PASSWORD: chatpass123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatuser -d chatdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - chat-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: chat-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - chat-network

  # Reverse Proxy (Nginx)
  reverse-proxy:
    image: nginx:alpine
    container_name: chat-reverse-proxy
    ports:
      - "7845:80"  # Non-common port for direct access
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/logs:/var/log/nginx
      - ./nginx/static:/var/www/static:ro
    depends_on:
      chat-api:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - chat-network
    healthcheck:
      test: ["CMD", "sh", "-c", "apk add --no-cache curl > /dev/null 2>&1 && curl -f http://localhost:80/api/v1/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 10s

  # Cloudflare Tunnel
  cloudflared:
    build:
      context: ./tunnel
      dockerfile: Dockerfile
    container_name: chat-cloudflared
    command: tunnel --config /etc/cloudflared/config.yml run
    restart: unless-stopped
    networks:
      - chat-network
    depends_on:
      reverse-proxy:
        condition: service_healthy
    environment:
      - TUNNEL_METRICS=0.0.0.0:2000
    healthcheck:
      test: ["CMD", "sh", "-c", "apk add --no-cache curl > /dev/null 2>&1 && curl -f http://localhost:2000/metrics"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 10s


  # FastAPI Application
  chat-api:
    build: .
    container_name: chat-api
    environment:
      - DATABASE_URL=postgresql://chatuser:chatpass123@postgres:5432/chatdb
      - REDIS_URL=redis://redis:6379/0
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=false
      - LOG_LEVEL=INFO
      - CACHE_TTL=3600
      - RATE_LIMIT_PER_MINUTE=60
      - CONTAINER_ENV=docker
      - LM_STUDIO_ENABLED=${LM_STUDIO_ENABLED:-true}
      - LM_STUDIO_URL=${LM_STUDIO_URL:-http://10.20.178.142:1234}
      - DEFAULT_LLM_BACKEND=${DEFAULT_LLM_BACKEND:-openrouter}
      - RAZORPAY_KEY_ID=${RAZORPAY_KEY_ID}
      - RAZORPAY_KEY_SECRET=${RAZORPAY_KEY_SECRET}
      - RAZORPAY_WEBHOOK_SECRET=${RAZORPAY_WEBHOOK_SECRET}
      - WEBHOOK_BASE_URL=https://api.disutopia.xyz
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app:ro
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - chat-network


  # Prometheus (Optional - for monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: chat-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - chat-network
    profiles:
      - monitoring

  # Grafana (Optional - for monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: chat-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - chat-network
    profiles:
      - monitoring


volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  chat-network:
    driver: bridge